# this is the build file for project Project name
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(Project name VERSION 1.0.0 LANGUAGES CXX)

# target
add_executable(aliases "")
set_target_properties(aliases PROPERTIES OUTPUT_NAME "aliases")
set_target_properties(aliases PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(aliases PRIVATE
    include
)
target_compile_options(aliases PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(aliases PRIVATE -W3)
    target_compile_options(aliases PRIVATE -WX)
elseif(Clang)
    target_compile_options(aliases PRIVATE -Wall)
    target_compile_options(aliases PRIVATE -Werror)
elseif(Gcc)
    target_compile_options(aliases PRIVATE -Wall)
    target_compile_options(aliases PRIVATE -Werror)
endif()
set_target_properties(aliases PROPERTIES CXX_EXTENSIONS OFF)
foreach(standard 26 23 20 17 14 11 98)
    include(CheckCXXCompilerFlag)
    if(MSVC)
        check_cxx_compiler_flag("/std:c++${standard}" aliases_support_c++_standard_${standard})
    else()
        check_cxx_compiler_flag("-std=c++${standard}" aliases_support_c++_standard_${standard})
    endif()
    if(aliases_support_c++_standard_${standard})
        target_compile_features(aliases PRIVATE cxx_std_${standard})
        break()
    endif()
endforeach()
if(MSVC)
    target_compile_options(aliases PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(aliases PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(aliases PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET aliases PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(aliases PRIVATE
    -m64
)
target_sources(aliases PRIVATE
    src/main.cpp
    src/commands/add_command.cpp
    src/utils/file_handler.cpp
)

# target
add_executable(test_add_command "")
set_target_properties(test_add_command PROPERTIES OUTPUT_NAME "test_add_command")
set_target_properties(test_add_command PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(test_add_command PRIVATE
    include
)
target_include_directories(test_add_command SYSTEM PRIVATE
    /home/mckatoo/.xmake/packages/g/gtest/v1.15.2/aea99fd8f63a47f0a0b9fe284bee1bfa/include
)
target_compile_options(test_add_command PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(test_add_command PRIVATE -W3)
    target_compile_options(test_add_command PRIVATE -WX)
elseif(Clang)
    target_compile_options(test_add_command PRIVATE -Wall)
    target_compile_options(test_add_command PRIVATE -Werror)
elseif(Gcc)
    target_compile_options(test_add_command PRIVATE -Wall)
    target_compile_options(test_add_command PRIVATE -Werror)
endif()
set_target_properties(test_add_command PROPERTIES CXX_EXTENSIONS OFF)
foreach(standard 26 23 20 17 14 11 98)
    include(CheckCXXCompilerFlag)
    if(MSVC)
        check_cxx_compiler_flag("/std:c++${standard}" test_add_command_support_c++_standard_${standard})
    else()
        check_cxx_compiler_flag("-std=c++${standard}" test_add_command_support_c++_standard_${standard})
    endif()
    if(test_add_command_support_c++_standard_${standard})
        target_compile_features(test_add_command PRIVATE cxx_std_${standard})
        break()
    endif()
endforeach()
if(MSVC)
    target_compile_options(test_add_command PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(test_add_command PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(test_add_command PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET test_add_command PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test_add_command PRIVATE
    gmock
    gtest
    pthread
)
target_link_directories(test_add_command PRIVATE
    /home/mckatoo/.xmake/packages/g/gtest/v1.15.2/aea99fd8f63a47f0a0b9fe284bee1bfa/lib
)
target_link_options(test_add_command PRIVATE
    -m64
)
target_sources(test_add_command PRIVATE
    tests/test_add_command.cpp
    src/commands/add_command.cpp
    src/utils/file_handler.cpp
)

# target
add_executable(test_file_handler "")
set_target_properties(test_file_handler PROPERTIES OUTPUT_NAME "test_file_handler")
set_target_properties(test_file_handler PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(test_file_handler PRIVATE
    include
)
target_include_directories(test_file_handler SYSTEM PRIVATE
    /home/mckatoo/.xmake/packages/g/gtest/v1.15.2/aea99fd8f63a47f0a0b9fe284bee1bfa/include
)
target_compile_options(test_file_handler PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CUDA>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(test_file_handler PRIVATE -W3)
    target_compile_options(test_file_handler PRIVATE -WX)
elseif(Clang)
    target_compile_options(test_file_handler PRIVATE -Wall)
    target_compile_options(test_file_handler PRIVATE -Werror)
elseif(Gcc)
    target_compile_options(test_file_handler PRIVATE -Wall)
    target_compile_options(test_file_handler PRIVATE -Werror)
endif()
set_target_properties(test_file_handler PROPERTIES CXX_EXTENSIONS OFF)
foreach(standard 26 23 20 17 14 11 98)
    include(CheckCXXCompilerFlag)
    if(MSVC)
        check_cxx_compiler_flag("/std:c++${standard}" test_file_handler_support_c++_standard_${standard})
    else()
        check_cxx_compiler_flag("-std=c++${standard}" test_file_handler_support_c++_standard_${standard})
    endif()
    if(test_file_handler_support_c++_standard_${standard})
        target_compile_features(test_file_handler PRIVATE cxx_std_${standard})
        break()
    endif()
endforeach()
if(MSVC)
    target_compile_options(test_file_handler PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(test_file_handler PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(test_file_handler PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET test_file_handler PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test_file_handler PRIVATE
    gmock
    gtest
    pthread
)
target_link_directories(test_file_handler PRIVATE
    /home/mckatoo/.xmake/packages/g/gtest/v1.15.2/aea99fd8f63a47f0a0b9fe284bee1bfa/lib
)
target_link_options(test_file_handler PRIVATE
    -m64
)
target_sources(test_file_handler PRIVATE
    tests/test_file_handler.cpp
    src/commands/add_command.cpp
    src/utils/file_handler.cpp
)

